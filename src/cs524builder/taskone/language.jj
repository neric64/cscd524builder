options
{
  DEBUG_PARSER = false;
  STATIC       = false;
}

PARSER_BEGIN(BuilderParser)

package cs524builder.taskone;

import java.util.*;
import java.io.*;

public class BuilderParser
{
   /** the fully qualified output filename of the Gnuplot file */
   private String _outputFilenameFull;
   
   // ---------------------------------------------------------------------------------------------------------------------------------------------------------
   /**
    * Creates a parser.  Call <tt>parse()</tt> to execute it.
    *
    * @param inputFilenameFull - the fully qualified input filename of the tank source file
    * @param outputFilenameFull - the fully qualified output filename of the Gnuplot file
    *
    * @throws IOException if there is any file error
    */
   public BuilderParser(final String inputFilenameFull, final String outputFilenameFull) throws IOException
   {
      this(new BufferedReader(new FileReader(inputFilenameFull)));

      assert (outputFilenameFull != null);

      _outputFilenameFull = outputFilenameFull;
   }
}

PARSER_END(BuilderParser)


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
SKIP : // whitespace
{
    " "
  | "\f"
  | "\n"
  | "\r"
  | "\t"
}


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
MORE : // comments
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT, IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
TOKEN : // keywords
{
    < DAN : "dan" >
  | < STU : "stu" >
}


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
TOKEN : // operators
{
    < ASSIGN : "=" >
}


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
TOKEN : // delimiters
{
    < COLON     : ":"  >
  | < COMMA     : ","  >
  | < LBRACE    : "{"  >
  | < RBRACE    : "}"  >
  | < LBRACKET  : "["  >
  | < RBRACKET  : "]"  >
  | < LPAREN    : "("  >
  | < RPAREN    : ")"  >
  | < SEMICOLON : ";"  >
  | < SQUOTE    : "'"  >
  | < DQUOTE    : "\"" >
}


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
TOKEN : // literals
{
    < #PATTERN_DECIMAL      : ["0"-"9"] >

  | < LITERAL_NUMBER        : ( <LITERAL_INTEGER> | <LITERAL_REAL> ) >
     
  | < LITERAL_INTEGER       : ("+"|"-")? ( <PATTERN_DECIMAL> )+ >
  | < LITERAL_REAL          : ("+"|"-")? ( <PATTERN_DECIMAL> )+ "." ( <PATTERN_DECIMAL> )+ >

  | < LITERAL_STRING :
    "\""
    (
      ( ~["\""] )
    )*
    "\""
    >
} 


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
TOKEN : // identifiers
{
    < IDENTIFIER : <LETTER> ( <LETTER> | <DIGIT> )* >
  | < #LETTER : ["a"-"z", "A"-"Z", "_"] >
  | < #DIGIT  : ["0"-"9"] >
}


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
public void parse() :
{
   List<String> arguments;
}
{
  (  
     arguments = Variable()

     <SEMICOLON>

     {
        System.out.println("arguments: "+ arguments);     }
  )*

  <EOF>
}


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
private List<String> Command() :
{
   List<String> arguments = new ArrayList<String>(); 
   
   String argument;
}
{	(
		< DEFINE >

		{			argument = Define();
		}

		arguments.add(argument);

		|

		< EXPORT_TO_GNUPLOT >

		{			argument = ExportToGnuPlot();
		}

		arguments.add(argument);

		|

		< PRINT_XML >

		{			arugment = PrintXML();
		}

		arguments.add(argument);

	)*

	< SEMICOLON >

	return arguments;


//--------------------------------------------------------------------------------------------------------------------------------------------------------------
private List<String> ExportToGnuplot() :
{
  List<String> arguments = new ArrayList<String>(); 
   
   String argument;
}
{  < EXPORT_TO_GNUPLOT >

  < LPAREN >

  {    argument = Variable();
  }

  agruments.add(argument);
  
  < COMMA >

  {    argument = Triple();
  }

  arguments.add(argument);

  < RPAREN >

  {    return arguments;
  }
  


//--------------------------------------------------------------------------------------------------------------------------------------------------------------
private List<String> PrintXML() :
{	List<String> arguments = new ArrayList<String>();

	String argument;
}
{  < PRINT_XML >
  < LPAREN >

  {    argument = Variable();
  }

  arguments.add(argument);

  {
    return arguments;
  }


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
private String Variable() :
{
   String variable;
}
{
   <IDENTIFIER>

   {
      variable = token.image;

      return variable;
   }
}
