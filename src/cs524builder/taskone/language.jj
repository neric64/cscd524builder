options
{
  DEBUG_PARSER = false;
  STATIC       = false;
}

PARSER_BEGIN(BuilderParser)

package cs524builder.taskone;

import java.util.*;
import java.io.*;

public class BuilderParser
{
   /** the fully qualified output filename of the Gnuplot file */
   private String _outputFilenameFull;
   
   // ---------------------------------------------------------------------------------------------------------------------------------------------------------
   /**
    * Creates a parser.  Call <tt>parse()</tt> to execute it.
    *
    * @param inputFilenameFull - the fully qualified input filename of the tank source file
    * @param outputFilenameFull - the fully qualified output filename of the Gnuplot file
    *
    * @throws IOException if there is any file error
    */
   public BuilderParser(final String inputFilenameFull, final String outputFilenameFull) throws IOException
   {
      this(new BufferedReader(new FileReader(inputFilenameFull)));

      assert (outputFilenameFull != null);

      _outputFilenameFull = outputFilenameFull;
   }
}

PARSER_END(BuilderParser)


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
SKIP : // whitespace
{
    " "
  | "\f"
  | "\n"
  | "\r"
  | "\t"
}


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
MORE : // comments
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT, IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
TOKEN : // keywords
{

  < COLOR : "color" >
  | < CONNECTS_TO : "connectsTo" >
  | < DEFINE : "define" >
  | < EXPORT_TO_GNUPLOT : "exportToGnuplot" >
  | < ID : "id" >
  | < NEW : "new" >
  | < PRINT_XML : "printXML" >
  | < SOCKET : "socket" >
  | < VOLUME : "volume" >
  | < AT : "at" >
}


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
TOKEN : // operators
{
    < ASSIGN : "=" >
}


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
TOKEN : // delimiters
{
    < COLON     : ":"  >
  | < COMMA     : ","  >
  | < LBRACE    : "{"  >
  | < RBRACE    : "}"  >
  | < LBRACKET  : "["  >
  | < RBRACKET  : "]"  >
  | < LPAREN    : "("  >
  | < RPAREN    : ")"  >
  | < SEMICOLON : ";"  >
  | < SQUOTE    : "'"  >
  | < DQUOTE    : "\"" >
}


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
TOKEN : // literals
{
    < #PATTERN_DECIMAL      : ["0"-"9"] >

  | < LITERAL_NUMBER        : ( <LITERAL_INTEGER> | <LITERAL_REAL> ) >
     
  | < LITERAL_INTEGER       : ("+"|"-")? ( <PATTERN_DECIMAL> )+ >
  | < LITERAL_REAL          : ("+"|"-")? ( <PATTERN_DECIMAL> )+ "." ( <PATTERN_DECIMAL> )+ >

  | < LITERAL_STRING :
    "\""
    (
      ( ~["\""] )
    )*
    "\""
    >
} 


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
TOKEN : // identifiers
{
    < IDENTIFIER : <LETTER> ( <LETTER> | <DIGIT> )* >
  | < #LETTER : ["a"-"z", "A"-"Z", "_"] >
  | < #DIGIT  : ["0"-"9"] >
}


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
public void parse() :
{
   List<String> arguments;
}
{
  (  
     arguments = Command()

     {
        System.out.println("arguments: "+ arguments);     }
  )+

  <EOF>
}


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
private List<String> Command() :
{
	List<String> arguments = new ArrayList<String>();
	String argument;
}
{	(		arguments = Define()

		|
		arguments = ExportToGnuplot()

		|

		arguments = PrintXML()
	)

	< SEMICOLON >

	{		return arguments;
	}
}


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
private List<String> Define() :
{
	List<String> arguments = new ArrayList<String>();
	String argument;
}
{	< DEFINE >
	argument = Variable()

	< ASSIGN >

	arguments = ComponentDefinition()

	{		arguments.add(0, argument);
		return arguments;
	}
}



//-------------------------------------------------------------------------------------------------------------------------------------------------------------
private List<String> ComponentDefinition() :
{
	List<String> arguments = new ArrayList<String>();
	List<String> temp = new ArrayList<String>();
	Blocks block = new Blocks();
	String argument;
}
{	< LPAREN >

	argument = Identifier()

	arguments = Volume()

	{		block.setVolume(arguments);
	}

	{
		block.setComponent(argument);
		arguments.add(0, argument);
	}

	temp = Socket()

	{		arguments.addAll(temp);
		block.setSocket(temp);
	}

	(
		//I can read three of the blocks, but not four.  When I try to read four gun is skiped and sensor is not.		temp = Connections()

		{			arguments.addAll(temp);
		}
	)?

	< RPAREN >

	{
		System.out.println(block.getComponent());
		System.out.println(block.getVolume());
		System.out.println(block.getSocket());		return arguments;
	}
}


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
private List<String> Connections() :
{
	List<String> arguments = new ArrayList<String>();
	List<String> temp = new ArrayList<String>();
	String argument;
}
{	< CONNECTS_TO >
	< LPAREN >

	(
		temp = ComponentDefinition()

		< AT >
		arguments = Triple()

		{			arguments.addAll(0, temp);
		}
			)+

	< RPAREN >

	{		return arguments;
	}
}


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
private List<String> ExportToGnuplot() :
{
	List<String> arguments = new ArrayList<String>();
	String argument;
}
{	< EXPORT_TO_GNUPLOT >
	< LPAREN >

	argument = Variable()

	< COMMA >

	arguments = Triple()

	{
		arguments.add(0, argument);
	}

	< RPAREN >

	{		return arguments;
	}
}


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
private List<String> PrintXML() :
{
	List<String> arguments = new ArrayList<String>();
	String argument;
}
{	< PRINT_XML >
	< LPAREN >

	argument = Variable()

	{		arguments.add(argument);
	}

	< RPAREN >

	{		return arguments;
	}
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------
private List<String> Socket() :
{
	List<String> arguments = new ArrayList<String>();
	String argument;
}
{	< SOCKET >
	< ASSIGN >

	arguments = Triple()

	{		return arguments;
	}
}


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
private List<String> Volume() :
{
	List<String> arguments = new ArrayList<String>();
	String argument;
}
{	< VOLUME >
	< ASSIGN >

	arguments = Triple()
	{
		return arguments;
	}
}


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
private List<String> Triple() :
{
	List<String> arguments = new ArrayList<String>();
	String argument;
}
{	< LBRACKET >
	< LITERAL_NUMBER >

	{		argument = token.image;
		arguments.add(argument);
	}

	< COMMA >
	< LITERAL_NUMBER >
	
	{
		argument = token.image;
		arguments.add(argument);
	}
	
	< COMMA >
	< LITERAL_NUMBER >

	{
		argument = token.image;
		arguments.add(argument);
	}
	
	< RBRACKET >

	{		return arguments;
	}
}


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
private String Variable() :
{
   String variable;
}
{
	<IDENTIFIER>
	{
	    variable = token.image;

		return variable;
	}
}


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
private String Identifier() :
{	String argument;
}
{	< ID >
	< ASSIGN >
	< LITERAL_STRING >

	{
		argument = token.image;

		return argument;
	}
}
